
狭义上，区块链是一种以区块为基本单位的链式数据结构，区块中利用数字摘要对之前的交易历史进行校验，适合分布式记账场景下防篡改和可扩展性的需求。
将区块链类比为一种分布式数据库技术
广义上，区块链还指代基于区块链结构实现的分布式记账技术，包括分布式共识、隐私与安全保护、点对点通信技术、网络协议、智能合约等。


公有（Public 或 Permissionless）链、联盟（Consortium 或 Permissioned）链和私有（Private）链。
公有链，顾名思义，任何人都可以参与使用和维护，参与者多为匿名。典型的如比特币和以太坊区块链，信息是完全公开的。
私有链，由集中管理者进行管理限制，只有内部少数人可以使用，信息不公开。一般认为跟传统中心化记账系统的差异不明显。
另外，根据使用目的和场景的不同，又可以分为以数字货币为目的的货币链，以记录产权为目的的产权链，以众筹为目的的众筹链等，也有不局限特定应用场景的所谓通用链。
目前来看，公有链信任度最高，也容易引发探讨，但短期内更多的应用会首先在联盟链上落地。公有链因为要面向匿名公开的场景，面临着更多的安全挑战和风险；同时为了支持互联网尺度的交易规模，需要更高的可扩展性。这些技术问题在短期内很难得到解决。


区块链所涉及的领域比较繁杂，包括分布式系统、密码学、心理学、经济学、博弈论、控制论、网络协议等，这也意味着我们在工程实践中会面临大量的挑战。
目前，公开的比特币公有区块链只能支持平均每秒约 7 笔的吞吐量，其安全的交易确认时间为一小时。以太坊公有区块链的吞吐量略高，达到每秒几十笔，但仍不能满足较大的应用。2017 年底，游戏应用 CryptoKitties 就造成了以太坊网络的严重堵塞。
一般情况下，区块链并不适用于高频交易的场景，但由于金融系统的迫切需求，业界目前积极探讨如何提高其交易性能，包括吞吐量（Throughput）和确认延迟（Latency）两个方面。
侧链  影子链

最初，比特币区块链考虑的是公开匿名场景下的最坏保证。通过引入了“工作量证明”（Proof of Work）策略来规避少数人的恶意行为，并通过概率模型保证最终共识到最长链。算法的核心思想是基于经济利益的博弈，让恶意破坏的参与者损失经济利益，从而保证大部分人的合作。同时，确认必须经过多个区块的生成之后达成，从概率上进行保证。这类算法的主要问题在于效率低下和能源浪费。类似地，还有以权益为抵押的 PoS 和 DPoS 算法等。
共识问题在很长一段时间内都将是极具学术价值的研究热点，核心的指标将包括支持规模、容错的节点比例、决策收敛速度、出错后的恢复、动态特性等。PoW 等基于概率的系列算法理论上允许少于一半的不合作节点，PBFT 等确定性算法理论上则允许不超过 1/3 的不合作节点。
整体来看，目前开源区块链系统已经可以满足大量应用场景的性能需求，但离大规模商用交易系统的吞吐性能（每秒稳定数万笔）还有差距。


最早出现的未必是先驱，也可能是先烈
一个是 技术领域也存在着周期律。 这个周期目前看是 7 年左右
事物的发展往往是延续的、长期的
新生事物大多数不是凭空而生，往往是解决了先贤未能解决的问题，或是出现了之前未曾出现过的场景。但只要是朝着提高生产力的正确方向努力，迟早会有出现在舞台上的一天。
区块链在金融相关领域的应用相对成熟


可能深入应用区块链技术的场景将包括：
金融服务：区块链带来的潜在优势包括降低交易成本、减少跨组织交易风险等。该领域的区块链应用目前最受关注，全球不少银行和金融交易机构都是主力推动者。部分投资机构也在应用区块链技术降低管理成本和管控风险。
贸易管理：区块链技术可以帮助自动化国际贸易和物流供应链领域中繁琐的手续和流程。基于区块链设计的贸易管理方案会为参与的多方企业带来极大的便利。
资源共享：以 Airbnb 为代表的分享经济公司将欢迎去中心化应用，可以降低管理成本。
贸易中销售和法律合同的数字化、货物监控与检测、实时支付等方向都可能成为创业公司的突破口。
物联网：物联网也是很适合应用区块链技术的一个领域，预计未来几年内会有大量应用出现，特别是租赁、物流等特定场景，都是很合适结合区块链技术的场景。但目前阶段，物联网自身的技术局限将造成短期内不会出现大规模应用。


交易本质上交换的是价值的所属权
通过金融交易，可以优化社会资源运转效率，实现资源使用的最优化。可以说，人类社会的文明发展，离不开金融交易。
BM 推出了基于区块链的全球支付解决方案 —— WorldWire，该网络使用 Stellar 协议，可以实现在数秒钟之内完成跨境支付的清结算。
中央银行与国家系统重要性金融机构共同维护分布式账本系统
民生银行、中信银行、中国银行和苏宁银行基于超级账本技术推出了首家基于区块链的信用证业务平台
利用数字货币相关技术来打击金融犯罪活动
数字版加拿大元
蚂蚁金服宣布其基于区块链的电子钱包跨境汇款服务在香港上线。该系统实现香港金管局、新加坡金管局、港版支付宝（Alipay HK）、渣打银行、菲律宾钱包 GCash 间的跨机构协同，Alipay HK 用户可基于区块链技术向 Gcash 汇款，汇款时间为 3～6 秒。
Abra：区块链数字钱包，以近乎实时的速度进行跨境支付，无需银行账户，实现不同币种的兑换，融资超过千万美金。Bitfinex：组建 Tether Limited 公司来发行稳定币 USDT，作为最流行的稳定币，市值超过 10 亿美金。稳定币通过绑定代币到法定货币以保障价格的稳定性。如果抵押过程公开并支持审计，则可以降低用户因为代币价格波动带来的风险。Bitwage：基于比特币区块链的跨境工资支付平台，可以实现每小时的工资支付，方便跨国企业进行外包工资管理。BitPOS：澳大利亚创业企业，提供基于比特币的低成本的快捷线上支付，适用于餐饮行业。Circle：由区块链充当支付网络，允许用户进行跨币种、跨境的快速汇款。Circle 获得了来自 IDG、百度的超过 6000 万美金的 D 轮投资。2018 年 9 月，Circle 推出了稳定币 USDC，上市 2 个月，USDC 的市值已达到 2 亿美元。Ripple：实现跨境的多币种、低成本、实时交易，引入了网关概念（类似银行），结构偏中心化，可以与银行等金融机构合作完成跨境支付。
英国央行对 RSCoin 进行了推广
摩根大通宣布推出基于区块链的数字货币”JPM Coin“，以实现客户之间的实时结算。据悉，每个 JPM Coin 暂时等价 1 美元。摩根大通的机构客户向指定账户存款后可获得等值的 JPM Coin。



Storj 项目提供了基于区块链的安全的分布式云存储服务。服务保证只有用户自己能看到自己的数据，并号称提供高速的下载速度和 99.99999% 的高可用性。
Ujo 音乐平台通过使用智能合约来创建一个透明的、去中心化的版权和版权所有者数据库来进行音乐版权税费的自动支付。
一些游戏将支持与 NEM 区块链的代币 XEM 整合
Augur 是一个运行在以太坊上的预测市场平台。使用 Augur，来自全球不同地方的任何人都可发起自己的预测话题市场，或随意加入其它市场，来预测一些事件的发展结果。预测结果和奖金结算由智能合约严格控制，使得在平台上博弈的用户不用为安全性产生担忧。
Follow My Vote 项目致力于提供一个安全、透明的在线投票系统。


目前来看，制约区块链技术进一步落地的因素有很多。比如如何来为区块链上的合同担保？特别在金融、法律等领域，实际执行的时候往往还需要线下机制来配合；另外就是基于区块链系统的价值交易，必须要实现物品价值的数字化，非数字化的物品很难直接放到数字世界中进行管理。


分布式系统核心技术
随着摩尔定律碰到瓶颈，分布式架构逐渐流行起来。
分布式集群


一致性（Consistency）问题
如果节点都很鲁棒，性能足够强，同时网络带宽足够大、延迟足够低，这样的集群系统往往更容易实现一致性。
分布式系统达成一致的过程，应该满足：可终止性（Termination）：一致的结果在有限时间内能完成；约同性（Agreement）：不同节点最终完成决策的结果是相同的；合法性（Validity）：决策的结果必须是某个节点提出的提案。
为了实现可扩展性，集群往往要采用异步设计，依靠网络消息交互，意味着不可预测的通信延迟、丢失或错误。
节点完成请求的时间无法保障，处理的结果可能是错误的，甚至节点自身随时可能发生故障；
随着业务场景越来越复杂，计算规模越来越庞大，单点系统往往难以满足高可扩展（Scalability）和高容错（Fault-tolerance）两方面的需求。此时就需要多台服务器通过组成集群，构建更加强大和稳定的“虚拟超级服务器”。
把不同时空发生的多个事件进行全局唯一排序，而且这个顺序还得是大家都认可的。
任务量越大，处理集群的规模越大，设计和管理的挑战也就越高。谷歌公司的全球搜索集群系统，包括数十万台服务器，每天响应百亿次的互联网搜索请求


共识（Consensus）
共识算法解决的是分布式系统对某个提案（Proposal），大部分节点达成一致意见的过程。提案的含义在分布式系统中十分宽泛，如多个事件发生的顺序、某个键对应的值、谁是主节点……等等。可以认为任何可以达成一致的信息都是一个提案。
解决两个基本的问题：
	首先，如何提出一个待共识的提案？如通过令牌传递、随机选取、权重比较、求解难题等；
	其次，如何让多个节点对该提案达成共识（同意或拒绝），如投票、规则验证等。
一般地，把出现故障（Crash 或 Fail-stop，即不响应）但不会伪造信息的情况称为“非拜占庭错误（Non-Byzantine Fault）”或“故障错误（Crash Fault）”；伪造信息恶意响应的情况称为“拜占庭错误”（Byzantine Fault），对应节点为拜占庭节点。
具体到分布式系统场景下，一致性指的是多个副本对外呈现的状态。
拜占庭类容错算法往往性能较差，容忍不超过 1/3 的故障节点。
Algorand 算法（2017 年）基于 PBFT 进行改进，通过引入可验证随机函数解决了提案选择的问题，理论上可以在容忍拜占庭错误的前提下实现更好的性能（1000+ TPS）。


FLP 不可能原理：在网络可靠、但允许节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性共识算法
FLP 不可能原理告诉我们，不要浪费时间去试图为异步分布式系统设计面向任意场景的共识算法。
工程实现上，若某次共识失败，再尝试几次，很大可能就成功了。
科学告诉你，什么是不可能的；工程则告诉你，付出一些代价，可以把它变成可行。
科学告诉你去赌场是愚蠢的，因为最终总会输钱；工程则告诉你，如果你愿意接受最终输钱的风险，中间说不定能偶尔小赢几笔呢！


CAP 原理
该原理被认为是分布式系统领域的重要原理之一，深刻影响了分布式计算与系统设计的发展。
CAP 原理：分布式系统无法同时确保一致性（Consistency）、可用性（Availability）和分区容忍性（Partition），设计中往往需要弱化对某个特性的需求。
一致性（Consistency）：任何事务应该都是原子的，所有副本上的状态都是事务成功提交后的结果，并保持强一致；可用性（Availability）：系统（非失败节点）能在有限时间内完成对操作请求的应答；分区容忍性（Partition）：系统中的网络可能发生分区故障（成为多个子网，甚至出现节点上线和下线），即节点之间的通信无法保障。而网络故障不应该影响到系统正常服务。
CAP 原理认为，分布式系统最多只能保证三项特性中的两项特性。
比较直观地理解，当网络可能出现分区时候，系统是无法同时保证一致性和可用性的。要么，节点收到请求后因为没有得到其它节点的确认而不应答（牺牲可用性），要么节点只能应答非一致的结果（牺牲一致性）。
网站静态页面内容
两阶段的提交算法
一致性很敏感的应用
银行取款机
双通道等机制增强可靠性


Paxos 问题是指分布式的系统中存在故障（crash fault），但不存在恶意（corrupt）节点的场景（即可能消息丢失或重复，但无错误消息）下如何达成共识。





密码学
Hash 算法与摘要、加密算法、数字签名和证书、PKI 体系、Merkle 树、布隆过滤器、同态加密等
1945 年 9 月 1 日，Claude Elwood Shannon（克劳德·艾尔伍德·香农）完成了划时代的内部报告《A Mathematical Theory of Cryptography（密码术的一个数学理论）》
二战时期光英国从事密码学研究的人员就达到 7000 人，而他们的成果使二战结束的时间至少提前了一到两年时间。

Hash（哈希或散列）算法，又常被称为指纹（fingerprint）或摘要（digest）算法，将任意长度的二进制明文串映射为较短的（通常是固定长度的）二进制串（Hash 值），并且不同的明文很难映射为相同的 Hash 值。

$ echo "hello blockchain world, this is yeasy@github"|shasum -a 256
db8305d71a9f2f90a3e118a9b49a4c381d2b80cf7bcef81930f30ab1832a3c90

一个优秀的 Hash 算法，将能满足：
	正向快速：给定原文和 Hash 算法，在有限时间和有限资源内能计算得到 Hash 值；
	逆向困难：给定（若干）Hash 值，在有限时间内无法（基本不可能）逆推出原文；
	输入敏感：原始输入信息发生任何改变，新产生的 Hash 值都应该发生很大变化；
	碰撞避免：很难找到两段内容不同的明文，使得它们的 Hash 值一致（即发生碰撞）。

常见的 Hash 算法包括国际上的 Message Digest（MD）系列和 Secure Hash Algorithm（SHA）系列算法，以及国内的 SM3 算法

MD 算法主要包括 MD4 和 MD5 两个算法，都被碰撞过 不安全
大多数 Hash 算法都是计算敏感型算法，在强大的计算芯片上完成得更快。因此要提升 Hash 计算的性能可以考虑硬件加速。例如采用普通 FPGA 来计算 SHA-256 值，可以轻易达到数 Gbps 的吞吐量，使用专用芯片吞吐量甚至会更高。

有时用户设置口令的安全强度不够，采用了一些常见的字符串，如 password、123456 等。有人专门搜集了这些常见口令，计算对应的 Hash 值，制作成字典。这样通过 Hash 值可以快速反查到原始口令。为了防范这一类攻击，可以采用加盐（Salt）的方法。保存的不是原文的直接 Hash 值，而是原文再加上一段随机字符串（即“盐”）之后的 Hash 值。Hash 结果和“盐”分别存放在不同的地方，这样只要不是两者同时泄露，攻击者就很难进行破解。

现代密码学分为两大基本类型: 对称加密、非对称加密

对称加密  
	加解密的密钥相同  计算效率高，加密强度高   需提前共享密钥，易泄露  DES、3DES、AES、IDEA
非对称加密
	加解密的密钥不相同		无需提前共享密钥	计算效率低，存在中间人攻击可能	RSA、ElGamal、椭圆曲线算法

根据加解密过程中所使用的密钥是否相同，算法可以分为对称加密（Symmetric Cryptography，又称共有密钥加密，Common-key cryptography）和非对称加密（Asymmetric Cryptography，又称公钥加密，Public-key Cryptography）


对称加密算法，顾名思义，加密和解密过程的密钥是相同的。
	该类算法优点是加解密效率（速度快，空间占用小）和加密强度都很高。
	分组加密的代表算法包括 DES、3DES、AES、IDEA 等。

非对称加密是现代密码学的伟大发明，它有效解决了对称加密需要安全分发密钥的问题。
非对称加密算法优点是公私钥分开，无需安全通道来分发密钥。缺点是处理速度（特别是生成密钥和解密过程）往往比较慢，一般比对称加解密算法慢 2~3个数量级；同时加密强度也往往不如对称加密。
非对称加密算法的安全性往往基于数学问题，包括大数质因子分解、离散对数、椭圆曲线等经典数学难题。
RSA 类算法被认为已经很难抵御现代计算设备的破解，一般推荐商用场景下密钥至少为 2048 位。如果采用安全强度更高的椭圆曲线算法，256 位密钥即可满足绝大部分安全需求。
代表算法包括：RSA、ElGamal、椭圆曲线、SM2 等系列算法。

加密密钥和解密密钥是不同的，分别称为公钥（Public Key）和私钥（Private Key）。私钥一般通过随机数算法生成，公钥可以根据私钥生成。
混合加密机制同时结合了对称加密和非对称加密的优点。

	HTTPS 在传统的 HTTP 层和 TCP 层之间引入 Transport Layer Security/Secure Socket Layer（TLS/SSL）加密层来实现安全传输。
	服务端证书中公钥  证书被篡改  证书   共同密钥

该机制的主要过程为：先用非对称加密（计算复杂度较高）协商出一个临时的对称加密密钥（或称会话密钥），然后双方再通过对称加密算法（计算复杂度较低）对所传递的大量数据进行快速的加密处理。

离散对数问题是指对于一个很大的素数 p，已知 g 为 p 的模循环群的原根，给定任意 x，求解 X=g^x mod p 是可以很快获取的。但在已知 p，g 和 X 的前提下，逆向求解 x 很难（目前没有找到多项式时间实现的算法）。该问题同时也是 ECC 类加密算法的基础。

实际上，现代密码学算法的安全性是通过数学难题来提供的，并非通过对算法自身的实现过程进行保密。


消息认证码的主要问题是需要提前共享密钥，并且当密钥可能被多方同时拥有（甚至泄露）的场景下，无法追踪消息的真实来源。如果采用非对称加密算法，则能有效地解决这个问题，即数字签名。
一个典型的场景是，Alice 通过信道发给 Bob 一个文件（一份信息），Bob 如何获知所收到的文件即为 Alice 发出的原始版本？Alice 可以先对文件内容进行摘要，然后用自己的私钥对摘要进行加密（签名），之后同时将文件和签名都发给 Bob。Bob 收到文件和签名后，用 Alice 的公钥来解密签名，得到数字摘要，与对文件进行摘要后的结果进行比对。如果一致，说明该文件确实是 Alice 发过来的（因为别人无法拥有 Alice 的私钥），并且文件内容没有被修改过（摘要结果一致）。
消息认证码（Hash-based Message Authentication Code，HMAC），利用对称加密，对消息完整性（Integrity）进行保护。
消息认证码可以用于简单证明身份的场景。如 Alice、Bob 提前共享了 K 和 H。Alice 需要知晓对方是否为 Bob，可发送一段消息 M 给 Bob。Bob 收到 M 后计算其 HMAC 值并返回给 Alice，Alice 检验收到 HMAC 值的正确性可以验证对方是否真是 Bob。
盲签名（Blind Signature）
理论上所有的非对称加密算法都可以用来实现数字签名
签名者需要在无法看到原始内容的前提下对信息进行签名
多重签名可以有效地应用在多人投票共同决策的场景中
典型的 HMAC 生成算法包括 K，H，M 三个参数。K 为提前共享的对称密钥，H 为提前商定的 Hash 算法（如 SHA-256），M 为要传输的消息内容。三个参数缺失了任何一个，都无法得到正确的 HMAC 值。


默克尔树（又叫哈希树）是一种典型的二叉树结构，由一个根节点、一组中间节点和一组叶节点组成。默克尔树最早由 Merkle Ralf 在 1980 年提出，曾广泛用于文件系统和 P2P 系统中。
默克尔树逐层记录哈希值的特点，让它具有了一些独特的性质。例如，底层数据的任何变动，都会传递到其父节点，一层层沿着路径一直到树根。这意味树根的值实际上代表了对底层所有数据的“数字摘要”。


布隆过滤器是一种基于 Hash 的高效查找结构，能够快速（常数时间内）回答“某个元素是否在一个集合内”的问题。
对同一个给定输入来说，多个 Hash 函数计算出多个地址，分别在位串的这些地址上标记为 1。在查找时，进行同样的计算过程，并查看对应元素，如果都为 1，则说明较大概率是存在该输入。
布隆过滤器与单个 Hash 算法查找相比，大大提高了空间利用率，可以使用较少的空间来表示较大集合的存在关系。
布隆过滤器在应用中误报率往往很低，例如，在使用 7 个不同 Hash 函数的情况下，记录 100 万个数据，采用 2 MB 大小的位串，整体的误判率将低于 1%。而传统的 Hash 查找算法的误报率将接近 10%。


已知的同态加密技术往往需要较高的计算时间或存储成本，相比传统加密算法的性能和强度还有差距
同态加密（Homomorphic Encryption）是一种特殊的加密方法，允许对密文进行处理得到仍然是加密的结果。即对密文直接进行处理，跟对明文进行处理后再对处理结果加密，得到的结果相同。从抽象代数的角度讲，保持了同态性。
同态性来自代数领域，一般包括四种类型：加法同态、乘法同态、减法同态和除法同态。同时满足加法同态和乘法同态，则意味着是代数同态，即全同态（Full Homomorphic）。同时满足四种同态性，则被称为算数同态。



零知识证明（Zero Knowledge Proof），是这样的一个过程，证明者在不向验证者提供任何额外信息的前提下，使验证者相信某个论断（Statement）是正确的。
这意味着目前广泛应用的非对称加密算法，包括基于大整数分解的 RSA、基于椭圆曲线离散对数问题的 ECC 等将来都将很容易被破解。当然，现代密码学体系并不会因为量子计算的出现而崩溃。一方面，量子计算设备离实际可用的通用计算机还有较大距离，密码学家可以探索更安全的密码算法。



BTC

比特币网络中所有试图参与者（矿工）都首先要付出挖矿的代价，进行算力消耗，越想拿到新区块的决定权，意味着抵押的算力越多。一旦失败，这些算力都会被没收掉，成为沉没成本。当网络中存在众多参与者时，个体试图拿到新区块决定权要付出的算力成本是巨大的，意味着进行一次作恶付出的代价已经超过可能带来的好处。
负反馈的控制论基本原理
传统共识问题往往是考虑在一个相对封闭的分布式系统中，允许同时存在正常节点、故障节点，如何快速达成一致。
比特币网络中矿工越多，系统就越稳定，比特币价值就越高，但挖到矿的概率会降低。
基于经济博弈原理。在一个开放的网络中，无法通过技术手段保证每个人都是合作的。但可以通过经济博弈来让合作者得到利益，让非合作者遭受损失和风险。
一个经典的例子是两个人来分一个蛋糕，如果都想拿到较大的一块，在没有第三方的前提下，该怎么制定规则才公平？

比特币是一种通缩的货币
比特币区块链（通过挖矿）提供了一个局部的、迄今为止最优的解决方案：如何在分散的系统中验证信任。这就意味着，区块链本质上解决了传统依赖于第三方的问题，因为这个协议不只满足了中心化机构追踪交易的需求，还使得陌生人之间产生信任。区块链的技术和安全的过程使得陌生人之间在没有被信任的第三方时产生信任。
目前，比特币网络算力峰值已经达到了每秒数百亿亿次。
也有人认为为了共识区块的生成，大部分计算力（特别是最终未能算出区块的算力）其实都浪费了。有人提出用 PoS（Proof of Stake）和 DPoS 等协议，利用权益证明（例如持有货币的币龄）作为衡量指标进行投票，相对 PoW 可以节约大量的能耗。PoS 可能会带来囤积货币的问题。除此之外，还有活跃度证明（Proof of Activity，PoA）、消耗证明（Proof of Burn，PoB）、能力证明（Proof of Capacity, PoC）、消逝时间证明（Proof of Elapsed Time）、股权速率证明（Proof of Stake Velocity，PoSV）等，采用了不同的衡量指标。
当然，无论哪种机制，都无法解决所有问题。一种可能的优化思路是引入随机代理人制度，通过算法在某段时间内确保只让部分节点参加共识的提案，并且要发放一部分“奖励”给所有在线贡献的节点。


闪电网络的主要思路十分简单——将大量交易放到比特币区块链之外进行，只把关键环节放到链上进行确认。

侧链（Sidechain）协议允许资产在比特币区块链和其他区块链之间互转。
当比特币在侧链流通时，主链上对应的比特币会被锁定，直到比特币从侧链回到主链。可以看到，侧链机制可将一些定制化或高频的交易放到比特币主链之外进行，实现了比特币区块链的扩展。侧链的核心原理在于能够冻结一条链上的资产，然后在另一条链上产生，可以通过多种方式来实现。

中本聪设计的简单支付验证（Simplified Payment Verification，SPV）可以实现这一点。SPV 能够以较小的代价判断某个支付交易是否已经被验证过（存在于区块链中），以及得到了多少算力保护（定位包含该交易的区块在区块链中的位置）。SPV 客户端只需要下载所有区块的区块头（Block Header），并进行简单的定位和计算工作就可以给出验证结论。

侧链协议的设计难点在于如何让资产在主链和侧链之间安全流转。简而言之，接受资产的链必须确保发送资产的链上的币被可靠锁定。

软分叉（Soft Fork）和硬分叉（Hard Fork）


比特币网络系统中并非是全新出现的技术，而是有机地组合了密码学、博弈论、记账技术、分布式系统和网络、控制论等领域的已有成果。比特币发明者能从如此广博的多个领域进行了恰当的选取，有效吸收前人的研究成果，这是真正的大师境界。正是如此巧妙的组合，让比特币项目产生了广泛且深远的影响。




ETH

运行智能合约的平台  图灵完备的应用  开发语言 Solidity
理想情况下将不存在故障停机、审查、欺诈，以及第三方干预等问题。
运营了一条公开的区块链平台——以太坊网络
去中心化”应用（Decentralized Application，DApp）。这些应用将运行在以太坊的虚拟机（Ethereum Virtual Machine，EVM）里。用户通过以太币（Ether）来购买燃料（Gas），维持所部署应用的运行。

按照智能合约的约定逻辑自动执行
以太坊平台目前支持 Golang、C++、Python 等多种语言实现的客户端。由于核心实现上基于比特币网络的核心思想进行了拓展，因此在很多设计特性上都与比特币网络十分类似。

以太坊区块链底层也是一个类似比特币网络的 P2P 网络平台，智能合约运行在网络中的以太坊虚拟机里。网络自身是公开可接入的，任何人都可以接入并参与网络中数据的维护，提供运行以太坊虚拟机的资源。
跟比特币项目相比，以太坊区块链的技术特点主要包括：支持图灵完备的智能合约，设计了编程语言 Solidity 和虚拟机 EVM；选用了内存需求较高的哈希函数，避免出现强算力矿机、矿池攻击；叔块（Uncle Block）激励机制，降低矿池的优势，并减少区块产生间隔（10 分钟降低到 15 秒左右）；采用账户系统和世界状态，而不是 UTXO，容易支持更复杂的逻辑；通过 Gas 限制代码执行指令数，避免循环执行攻击；支持 PoW 共识算法，并计划支持效率更高的 PoS 算法。


以太坊项目提出了许多创新的技术概念，包括智能合约、基于账户的交易、以太币和燃料等。

智能合约
	智能合约作为运行在以太坊虚拟机（Ethereum Virual Machine，EVM）中的应用，可以接受来自外部的交易请求和事件，通过触发运行提前编写好的代码逻辑，进一步生成新的交易和事件，可以进一步调用其它智能合约。
	智能合约的执行结果可能对以太坊网络上的账本状态进行更新。这些修改由于经过了以太坊网络中的共识，一旦确认后无法被伪造和篡改。

账户	
	以太坊则采用了不同的做法，直接用账户来记录系统状态。每个账户存储余额信息、智能合约代码和内部数据存储等。以太坊支持在不同的账户之间转移数据，以实现更为复杂的逻辑。
	以太坊账户分为两种类型：合约账户（Contracts Accounts）和外部账户（Externally Owned Accounts，或 EOA）。
		合约账户：存储执行的智能合约代码，只能被外部账户来调用激活；
		外部账户：以太币拥有者账户，对应到某公钥。账户包括 nonce、balance、storageRoot、codeHash 等字段，由个人来控制。

交易
	交易（Transaction），在以太坊中是指从一个账户到另一个账户的消息数据。消息数据可以是以太币或者合约执行参数。
	类似比特币网络，在发送交易时，用户需要缴纳一定的交易费用，通过以太币方式进行支付和消耗。目前，以太坊网络可以支持超过比特币网络的交易速率（可以达到每秒几十笔）。

以太币
	以太币主要用于购买燃料，支付给矿工，以维护以太坊网络运行智能合约的费用。以太币最小单位是 wei，一个以太币等于 10^18 个 wei。
	以太币（Ether）是以太坊网络中的货币。

燃料
	燃料（Gas），控制某次交易执行指令的上限。每执行一条合约指令会消耗固定的燃料。当某个交易还未执行结束，而燃料消耗完时，合约执行终止并回滚状态。


账户模型和UTXO模型的差别 
	直接访问 不需要回溯历史   
	较小存储空间
	易于理解和编程
	安全性没那么高 需要处理好重放攻击等情况
	不支持追溯历史

以太坊项目未来希望通过分片（sharding）机制来提高整个网络的扩展性。
分片是一组维护和执行同一批智能合约的节点组成的子网络，是整个网络的子集。
支持分片功能之前，以太坊整个网络中的每个节点都需要处理所有的智能合约，这就造成了网络的最大处理能力会受限于单个节点的处理能力。

以太坊客户端可用于接入以太坊网络，进行账户管理、交易、挖矿、智能合约等各方面操作。
go-ethereum 的独立客户端 Geth 是最常用的以太坊客户端之一
Mist 是官方提供的一套包含图形界面的钱包客户端，除了可用于进行交易，也支持直接编写和部署智能合约。

IDE
Truffle：一个功能丰富的以太坊应用开发环境。
Embark：一个 DApp 开发框架，支持集成以太坊、IPFS 等。
Remix：一个用于编写 Solidity 的 IDE，内置调试器和测试环境。


Geth，即 Go 语言实现的以太坊客户端  安装Go 语言环境   安装 C 的编译器   
	使用 Geth 客户端搭建测试用的本地区块链，以及如何在链上部署和调用智能合约
	由于在以太坊公链上测试智能合约需要消耗以太币，所以对于开发者开发测试场景，可以选择本地自行搭建一条测试链。开发好的智能合约可以很容易的切换接口部署到公有链上。注意测试链不同于以太坊公链，需要给出一些非默认的手动配置。
	新建一个账号
	命令进行挖矿

以 Solidity 编写的智能合约为例。为了将合约代码编译为 EVM 二进制，需要安装 Solidity 编译器 solc。
	

超级账本（Hyperledger）
	全球最大的开源企业级分布式账本平台  吸引了包括 IBM、Intel、Cisco、DAH、摩根大通、R3、甲骨文、百度、腾讯等在内的众多科技和金融巨头的参与贡献，以及在银行、供应链等领域的应用实践。成立两年多时间以来，超级账本得到了广泛的关注和飞速发展，目前囊括十大顶级项目，拥有近三百家企业会员。超级账本的开源代码和技术，也成为分布式账本领域的首选。


	2015 年 12 月  
	作为一个联合项目（Collaborative Project），超级账本由面向不同目的和场景的子项目构成。目前包括 Fabric、SawToothLake、Iroha、Blockchain Explorer、Cello、Indy、Composer、Burrow、Quilt、Caliper、Ursa、Grid、Transact、Aries、Besu、Avalon 等顶级项目，所有项目都遵守 Apache v2 许可，并约定共同遵守如下的 基本原则：
			重视模块化设计：包括交易、合同、一致性、身份、存储等技术场景；
			重视代码可读性：保障新功能和模块都可以很容易添加和扩展；
			可持续的演化路线：随着需求的深入和更多的应用场景，不断增加和演化新的项目。
	如果说比特币为代表的加密货币提供了区块链技术应用的原型，以太坊为代表的智能合约平台延伸了区块链技术的适用场景，那么面向企业场景的超级账本项目则开拓了区块链技术的全新阶段。超级账本首次将区块链技术引入到了联盟账本的应用场景，引入权限控制和安全保障，这就为基于区块链技术的未来全球商业网络打下了坚实的基础。

	顶级项目    分别从平台、工具和类库三个层次相互协作，构成了完善的生态系统
		Fabric  支持 PBFT 等新的共识机制，支持权限管理
		Sawtooth 全新的基于硬件芯片的共识机制 Proof of Elapsed Time
		Blockchain Explorer 提供 Web 操作界面，通过界面快速查看查询绑定区块链的状态
	所有项目一般都需要经历提案（Proposal）、孵化（Incubation）、活跃（Active）、退出（Deprecated）、终结（End of Life）等 5 个生命周期。
	任何希望加入到 Hyperledger 社区中的项目，必须首先由发起人编写提案。描述项目的目的、范围、参与者和开发计划等重要信息，并由全球技术委员会来进行评审投票，评审通过则可以进入到社区内进行孵化。项目成熟后可以申请进入到活跃状态，发布正式的版本。项目不再活跃后可以进入维护阶段，最终结束生命周期。

Fabric   	
	面向企业的分布式账本平台，其创新地引入了权限管理支持，设计上支持可插拔、可扩展，是首个面向联盟链场景的开源项目。
	由 IBM、DAH 等企业于 2015 年底联合贡献到社区










Byzantine Failure（拜占庭错误）
Consensus（共识）
Fintech：Financial Technology，跟金融相关的（信息）技术；
Endorser（推荐节点或背书节点）
CA：Certificate Authority
CBDC：Central Bank Digital Currency
CSR：Certificate Signing Request，证书签名申请
Non-validating Peer（非验证节点
DAO：Decentralized Autonomous Organization，分布式自治组织，基于区块链的按照智能合约联系起来的松散自治群体；
DTCC：Depository Trust and Clearing Corporation，存托和结算公司
Distributed Ledger（分布式账本）
PoS：Proof of Stake，股份持有证明，拥有代币或股权越多的用户，挖到矿的概率越大；
Confidentiality（保密）
DApp：Decentralized Application，去中心化应用
DLT：Distributed Ledger Technology，分布式账本技术
Auditability（审计性）：在一定权限和许可下，可以对链上的交易进行审计和检查；
PoW：Proof of Work，工作量证明，在一定难题前提下求解一个 SHA256 的 Hash 问题；
Sybil Attack（女巫攻击）：少数节点通过伪造或盗用身份伪装成大量节点，进而对分布式系统系统进行破坏。
Bootstrap（启动
Distributed（分布式）












iMRich

imRich

imrich

iMrich

IMrich

Imrich

ImRich




交易反骨
如何设计有效的政体


面试新人流程： 
	我作为面试官 先自我介绍 - 来路 目的 
	看简历 问项目经验  大致负责什么模块  
	遇到啥问题  怎么解决的  思路

具体技术点:
	java 
	kotlin 
	jetpack mvvm
	性能优化 

高级技术点:
	framework层
	插件  组件
	安全  反编译   c++  so库

结尾拉家常:
	对技术趋势有啥看法？  交流一波 
	有啥问题想问的？ 
