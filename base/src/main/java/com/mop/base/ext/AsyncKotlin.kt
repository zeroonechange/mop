
class AsyncKotlin {

}

// 异步程序设计    线程  回调 future，promise   反应式扩展   协程

// 线程需要昂贵的上下⽂切换  线程数受底层操作系统的限制
// 线程不容易使⽤。线程的 Debug，避免竞争条件是我们在多线程编程中遇到的常⻅问题

// 回调嵌套的难度 错误处理很复杂  回调地狱  写时爽

// 反应式扩展  RxJava  -可观察流

// 协程  可被挂起  ⼀种函数可以在某个时刻暂停执⾏并稍后恢复的想法   -  suspend
// 开发⼈员编写⾮阻塞代码与编写阻塞代码基本相同。  编程模型本身并没有真正改变

