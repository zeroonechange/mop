
================================================================================================================================

Android Gradle （一）Gradle的Android插件入门
	Gradle有很多插件，为了支持Android项目的构建，谷歌为Gradle编写了Android插件，新的Android构建系统就是由Gradle的Android插件组成的，Gradle是一个高级构建工具包，它管理依赖项并允许开发者自定义构建逻辑。Android Studio使用Gradle wrapper来集成Gradle的Android插件。需要注意的是，Gradle的Android插件也可以独立于AndroidStudio运行。
	代码和资源易于重用 无论是针对多个apk发行版还是针对不同风格的应用程序，都可以很容易创建应用程序的多个不同版本。 易于配置、扩展和自定义构建过程 良好的IDE集成

	项目build.gradle  模块build.gradle   gradle-wrapper.properties  
	gradle.properties   settings.gradle  local.properties
	compileSdkVersion：配置编译该模块的SDK版本
	buildToolsVersion：Android构建工具的版本
	targetSdkVersion 基于哪个SDK版本开发

		buildTypes块用于配置构建不同类型的APK。
		buildTypes块还可以配置很多属性，常用的配置如下所示。
		shrinkResources 是否自动清理未使用的资源，默认值为false 
		zipAlignEnabled 是否开启开启zipalign优化，提高apk运行效率 
		proguardFile ProGuard混淆所使用的ProGuard配置文件 
		proguardFiles 同事配置多个ProGuard配置文件 
		signingConfig 配置默认的签名信息 
		multiDexEnabled 是否启用自动拆分多个Dex的功能

		sourceSets 配置目录指向 
		productFlavors 多个渠道配置 
		lintOptions Lint配置 
		dexOptions DEX工具配置 
		adbOptions adb配置 
		packagingOptions 打包时的相关配置
	全局配置 
		使用ext块配置
		使用config.gradle配置


Android Gradle （二）签名配置和依赖管理
	Gradle的依赖传递
		重复依赖、依赖错误等问题，那么我们可以通过transitive来禁止依赖传递
	依赖检查
		执行gradle :app:dependencies
		Android Studio中的右侧的Gradle面板，找到app模块，展开后找到help目录中的dependencies
		使用Gradle View插件
			选择View-–>Tools Windows–Gradle View，这时就可以在AS的底部发现Gradle View窗口，里面会显示当前项目的所有依赖树
	强制使用统一的库的版本，force可以强制设置模块的库的版本
	排除库依赖传递中涉及的库，此时不能靠关闭依赖传递来解决问题，这时可以使用exclude


//多线程问题    还有半个月了 



================================================================================================================================

all comes from  http://liuwangshu.cn/tags/Gradle%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/ 

序
	Android Studio 构建系统以 Gradle 为基础
	Android Gradle 插件    AGP plugin
	可独立于 Android Studio 运行并单独更新
	Android 插件 DSL 参考文档
	Gradle DSL 参考文档
	各个 Android Gradle 插件版本所需的 Gradle 版本
	指定 Gradle 版本
	在 gradle/wrapper/gradle-wrapper.properties 文件中修改 Gradle 分发引用来指定

Gradle核心思想（一）为什么现在要用Gradle？
	基于JVM的新一代构建工具
	构建系统、插件化、热修复和组件化等等
	节省了开发的时间并减少错误
	完成代码的编译、测试和打包等工作
	不同操作系统的限制
	APK的构建过程
	AAPT(Android Asset Packaging Tool)打包res资源文件
	AIDL工具会将所有的aidl接口转化为对应的Java接口
	所有的Java代码，包括R.java和Java接口都会被Java编译器编译成.class文件
	生成的.class文件、第三库和其他.class文件编译成.dex文件
	编译生成的.dex文件、编译过的资源、无需编译的资源（如图片等）会被ApkBuilder工具打包成APK文件
	使用Debug Keystore或者Release Keystore对上一步生成的APK文件进行签名。
	对APK正式签名，还需要使用zipalign工具对APK进行对齐操作，这样应用运行时会减少内存的开销
	在Gradle出现之前，有三个基于Java的构建工具：Ant、Gant和Maven
	Gradle可以使用Groovy来实现构建脚本，Groovy 是基于Jvm一种动态语言，它的语法和Java非常相似并兼容Java，因此你无需担心学习Groovy的成本。Groovy在Java的基础上增加了很多动态类型和灵活的特性，比起XML，Gradle更具有表达性和可读性。
	可配置的可靠的依赖管理方案
	为构建你的项目提供引导和默认值
	Gradle Wrapper是对Gradle 的包装，它的作用是简化Gradle本身的下载、安装和构建，比如它会在我们没有安装Gradle的情况下，去下载指定版本的Gradle并进行构建。Gradle的版本很多，所以有可能出现版本兼容的问题，这时就需要Gradle Wrapper去统一Gradle的版本，避免开发团队因为Gradle版本不一致而产生问题。
	Gradle显然无法满足所有企业级构建的所有要求，但是可以通过Hook Gradle的生命周期，来监控和配置构建脚本。
	Gradle是一个开源的项目


Gradle核心思想（二）Gradle入门前奏
	安装Gradle前要确保系统已经配置好JDK的环境
	实现Hello World
	task（任务）和action(动作)是Gradle的重要元素
	task代表一个独立的原子性操作，比如复制一个文件，编译一次Java代码，这里我们简单的定义一个名为hello的任务。
	doLast 代表task执行的最后一个action，通俗来讲就是task执行完毕后会回调doLast中的代码，在上面这个例子中就会打印 ‘Hello world!’
	操作符<< 是doLast方法的快捷版本
	Gradle的任务，包括创建任务、任务依赖、 动态定义任务和任务的分组和描述
	创建任务
	1.直接用任务名称创建。
	2.任务名称+任务配置创建。
	3.TaskContainer的create方法创建。
	任务依赖会决定任务运行的先后顺序，被依赖的任务会在定义依赖的任务之前执行。
	动态定义任务指的是在运行时来定义任务的名称
	Gradle有任务组的概念，可以为任务配置分组和描述，以便于更好的管理任务，拥有良好的可读性。
	Gradle日志级别
	gradle -q tasks命令来获取所有的任务信息
	gradle -q help --task hello命令来显示hello任务的帮助信息
	可以看到hello任务的路径、类型、描述和分组。


Gradle核心思想（三）Groovy快速入门指南
	Groovy是Apache旗下的一种基于JVM的面向对象编程语言，既可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了Python、Ruby 和 Smalltalk 语言的优秀特性，比如动态类型转换、闭包和元编程支持。
	用def关键字来定义变量和方法
	如果指定了方法返回类型，可以不需要def关键字来定义方法。
	如果不使用return ，方法的返回值为最后一行代码的执行结果。
	Groovy中有很多省略的地方
	Groovy类非常类似于Java类。
	Groovy类与Java类有以下的区别： 默认类的修饰符为public。 没有可见性修饰符的字段会自动生成对应的setter和getter方法。 类不需要与它的源文件有相同的名称，但还是建议采用相同的名称。
	Groovy断言和Java断言不同，它一直处于开启状态，是进行单元测试的首选方式。
	当断言的条件为false时，程序会抛出异常，不再执行下面的代码
	Groovy支持Java的for(int i=0;i<N;i++)和for(int i :array)形式的循环语句，另外还支持for in loop形式，支持遍历范围、列表、Map、数组和字符串等多种类型。
	Groovy中的Switch语句不仅兼容Java代码，还可以处理更多类型的case表达式。
	case表达式可以是字符串、列表、范围、Integer等等
	Groovy中的数据类型主要有以下几种： Java中的基本数据类型 Groovy中的容器类 闭包
	在Groovy种有两种字符串类型，普通字符串String（java.lang.String）和插值字符串GString（groovy.lang.GString）
	String是不可变的，GString却是可变的，GString和String即使有相同的字面量，它们的hashCodes的值也可能不同，因此应该避免使用使用GString作为Map的key。
	单引号字符串  在Groovy中单引号字符串和双引号字符串都可以定义一个字符串常量，只不过单引号字符串不支持插值。
	要想插值可以使用双引号字符串，插值指的是替换字符串中的占位符，占位符表达式为${}或者以$为前缀。
	三引号字符串可以保留文本的换行和缩进格式，不支持插值。
	Groovy没有定义自己的集合类，它在Java集合类的基础上进行了增强和简化。Groovy的List对应Java中的List接口，默认的实现类为Java中的ArrayList。
	创建Map同样使用[]，需要同时指定键和值，默认的实现类为java.util.LinkedHashMap。
	Groovy中的闭包是一个开放的、匿名的、可以接受参数和返回值的代码块。
	{ [closureParameters -> ] statements }
	参数列表部分[closureParameters -> ]和语句部分 statements 。
	I/O 操作符   文件读取    文件写入
	asType可以用于数据类型转换
	判断是否为真     if (name) {}
	Groovy中可以使用？.来安全的取值：
	with操作符    对同一个对象的属性进行赋值


Gradle核心思想（四）看似无用，实则重要的Gradle Wrapper
	Gradle Wrapper称为Gradle包装器，是对Gradle的一层包装。
	它是一个脚本，可以在计算机没有安装Gradle的情况下运行Gradle构建，并且能够指定Gradle的版本，开发人员可以快速启动并运行Gradle项目，而不必手动安装，这样就标准化了项目，从而提高了开发效率。AS在新建项目时会自带Gradle Wrapper，这也是我们很少去单独去下载安装Gradle的原因。
	gradle-wrapper.properties是Gradle Wrapper的属性文件，用来配置Gradle Wrapper
	distributionUrl这个字段，如果官方的地址下载不了或者缓慢，可以将这个地址换为其他的镜像地址，或者干脆把Gradle发行版压缩包放在服务器上以供下载
	使用Gradle Wrapper不是用Gradle命令，而是用gradlew和gradlew.bat脚本
	升级Gradle Wrapper有两种方式，一种是设置Gradle属性文件的distributionUrl属性，第二种是通过运行wrapper任务，推荐使用第二种方式。当前本地的Gradle版本为4.2.1，我想升级为5.1.1，只需要运行gradlew wrapper –gradle-version 5.1.1命令就可以了。
	运行gradlew -v命令来检查Gradle的版本。


Gradle核心思想（五）通俗易懂的Gradle插件讲解
	是Gradle插件，而不是Android Gradle插件
	要想应用插件，主要有两个步骤，一是解析插件，二是把插件应用到项目中，应用插件通过 Project.apply() 方法来完成。
	在Gradle中一般有两种类型的插件，分别叫做脚本插件和对象插件。脚本插件是额外的构建脚本，它会进一步配置构建，可以把它理解为一个普通的build.gradle。对象插件又叫做二进制插件，是实现了Plugin接口的类，下面分别介绍如何使用它们。
	对象插件可以分为内部插件和第三方插件
	Gradle 的发行包中有大量的插件，这些插件有很多类型，比如语言插件、集成插件、软件开发插件等等
	第三方的对象插件通常是jar文件，要想让构建脚本知道第三方插件的存在，需要使用buildscrip来设置。
	自定义对象插件
	对象插件是实现了org.gradle.api.plugins<Project>接口的插件，这个接口中只定义个一个简单的apply方法，想要自定义插件就需要去实现org.gradle.api.plugins<Project>接口。
	Gradle插件可以做什么呢？主要有以下的几点
	为项目配置依赖。
	为项目配置约定，比如约定源代码的存放位置。
	为项目添加任务，完成测试、编译、打包等任务。
	为项目中的核心对象和其他插件的对象添加拓展类型。


Gradle核心思想（六）自定义Gradle插件的三种方式
	自定义Gradle插件主要有三种方式，分别是build.gradle中编写、buildSrc工程项目中编写、独立项目中编写。
	1.build.gradle对象插件是实现了org.gradle.api.plugins接口的插件，这个接口中只定义个一个简单的apply方法，想要实现自定义插件就需要去实现org.gradle.api.plugins接口。
	2.buildSrc工程项目除了在build.gradle中编写的自定义插件，还可以将插件的源代码放在rootProjectDir/buildSrc/src/main/groovy目录中，Gradle会自动识别来完成编译和测试。
	3.独立项目无论是在build.gradle中编写自定义插件，还是buildSrc项目中编写自定义插件，都只能在自己的项目中进行使用。如果想要分享给其他人或者自己用，可以在一个独立的项目中编写插件，这个项目会生成一个包含插件类的JAR文件，有了JAR文件就很容易进行分享了。
	上传插件
	将自定义插件发布到Gradle插件门户上，就可以使用插件DSL了

